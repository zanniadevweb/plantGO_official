apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

// --------------------- Bloc "ext" propre à libGDX -------------------- //
ext {
    appName = "plantGO"
    gdxVersion = '1.9.14'
    roboVMVersion = '2.3.6'
    box2DLightsVersion = '1.4'
    ashleyVersion = '1.7.0'
    aiVersion = '1.8.0'
}
// ----------------------------------------- //

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    // Faire le choix de la version pour [Android Gradle Plugin 3.6.0] (1) ou [Android Studio 4.0 et +] (2)
      // --------------------- 1. [Android Gradle Plugin 3.6.0] Permet l'usage de la fonctionnalité 'ViewBinding' : https://medium.com/androiddevelopers/use-view-binding-to-replace-findviewbyid-c83942471fc -------------------- //
    /*viewBinding {
        enabled = true
    }*/

    // --------------------- 2. [Android Studio 4.0 et +] Permet l'usage de la fonctionnalité 'ViewBinding' : https://medium.com/androiddevelopers/use-view-binding-to-replace-findviewbyid-c83942471fc -------------------- //
    buildFeatures {
        viewBinding = true
    }
    // ----------------------------------------- //

    defaultConfig {
        applicationId "com.example.test_libgdxintoandroid"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            //Enable the proguard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), "proguard-rules.pro"

            //Other parameters
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            pseudoLocalesEnabled false
            zipAlignEnabled true

            // Supprime le poids des ressource lors de la génération de l'APK
            shrinkResources true
        }
    }

    // --------------------- Bloc "sourceSets" propre à libGDX -------------------- //
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // ----------------------------------------- //
}

// --------------------- Ligne de configuration propre à libGDX ---------------------- //
configurations { natives }
// ----------------------------------------- //

dependencies {
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    // ------------------------ Dépendances liées à l'API -----------------------------//
    implementation 'com.google.firebase:firebase-storage:19.2.1'
    implementation 'com.android.volley:volley:1.2.0'
    // -----------------------------------------------------//

    // --------------------- Dépendances propres à Android Studio -------------------- //
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment:2.3.4'
    implementation 'androidx.navigation:navigation-ui:2.3.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    testImplementation 'junit:junit:4.13.2'
    // ----------------------------------------- //

    // --------------------- Dépendances pour utiliser des widgets du type "Material Design" : https://material.io/components?platform=android --------------------- //
    implementation 'com.google.android.material:material:1.3.0'
    // ----------------------------------------- //

    // --------------------- Dépendances pour utiliser les Gifs --------------------- //
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.23'
    // ----------------------------------------- //

    // ------------------ Dépendances propres à libGDX ----------------------- //
    api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
    // ----------------------------------------- //

    // ------------------ Dépendances propres à Google Maps ----------------------- //
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.android.support:multidex:1.0.3'
    // ----------------------------------------- //
}

// --------------------- Bloc propre à libGDX -------------------- //
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs()
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86/").mkdirs()
    file("libs/x86_64/").mkdirs()

    configurations.getByName("natives").copy().files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
// ----------------------------------------- //